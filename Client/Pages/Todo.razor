@page "/"
@page "/todo"
@using ToDo.Shared
@using ToDo.Shared.Utils
@inject HttpClient Http
@inject IJSRuntime JSRuntime



<div class="main">
    <div class="container-fluid " id="page-content">
        <div class="padding">
            <div class="row  d-flex justify-content-start add-title-container">
                <div class="col-md-6">
                    <div class="d-flex">
                        <input class="form-control form-control-lg add-text" type="text" @bind-value=@newTodoTitle
                            placeholder="Title for ToDo">

                        <button type="button" @onclick="AddTodoTitle" disabled="@(string.IsNullOrWhiteSpace(newTodoTitle))"
                        class="btn btn-outline-success btn-lg">Add Title</button>
                    </div>
                </div>
            </div>

            @if(ShowLoading) {
                <LoadingScreen></LoadingScreen>
            }
            else {
                 <div class="row">
                <div class="col-md-12">
                    <div class="container-fluid no-padding">
                        <div class="card-columns">
                            <Dropzone Items="ToDoList" InstantReplace="true" TItem="Category">
                                <div class="card">
                                    <div class="card-header"> @context.Title</div>
                                    <div class="card-body">
                                        <div class="list-wrapper">
                                            <div class="todo-list">
                                                @{
                                                    var todoCategory = @context;
                                                }
                                                    @if(@context.ToDo != null ){
                                                        <ul>
                                                        @foreach (var items in todoCategory.ToDo)
                                                        {   
                                                            <li  class="@items.CompletedCssClass" id="@items.ItemID">
                                                                <div class="form-check col-md-10 col-lg-10 col-sm-10 col-xs-10" style="margin-left: 15px"> 
                                                                            <label class="form-check-label"> 
                                                                                <input class="checkbox" type="checkbox"                                                                             
                                                                                @onchange="(e) => TodoItemMarkComplete(items,todoCategory, e)"> @items.Title
                                                                                <i class="input-helper"></i>
                                                                            </label>                                                                         
                                                                        </div>
                                                                        <div class="col-md-1 col-lg-1 col-sm-1 col-xs-1" 
                                                                            style="padding:0px" @onclick="()=>DeleteToDoItem(items,todoCategory)">
                                                                                @if(items.Active == 1) {
                                                                                @* <Tooltip Text="Delete?"> <i class="remove oi oi-delete"></i> </Tooltip> *@
                                                                                <i class="remove oi oi-delete"></i>
                                                                                } 
                                                                                else {
                                                                                    @* <Tooltip Text="Undo"> <i class="remove oi oi-action-undo"></i> </Tooltip> *@
                                                                                    <i class="remove oi oi-action-undo"></i>
                                                                                }                                                                        
                                                                        </div> 
                                                            </li>
                                                        }
                                                        </ul>
                                                    }
                                                    else{
                                                        <div class="alert alert-info mt-3 mb-3 pt-5 pb-5" style="font-size: 13px;" >
                                                            Please add your todo items here
                                                        </div>
                                                    }
                                            </div>
                                            <div class="todo-add d-flex">
                                                <input class="form-control" type="text" @bind-value=@newTodo 
                                                placeholder="Add items">
                                                
                                                <button type="button"  disabled="@(string.IsNullOrWhiteSpace(newTodo))"                                                                                            
                                                    @onclick="()=> AddTodoItem(todoCategory, false)"
                                                 class="btn btn-outline-success">Add</button>
                                            </div>

                                        
                                        </div>
                                    </div>
                                </div>
                            </Dropzone>
                        </div>
                    </div>
                    
                    
                </div>
            </div>
            }

            
           
        </div>
    </div>  


</div>

@code {
      
    private string newTodo, newTodoTitle;
    private Category[] categories ;
    private Category newCat = new Category();
    public List<Category> ToDoList = null;
    
    private bool ShowLoading {get; set;}
    
    

    protected override async Task OnInitializedAsync()
    {
        ShowLoading = true;
        ToDoList = new List<Category>();
        categories = await Http.GetFromJsonAsync<Category[]>("api/category");
        //await JSRuntime.InvokeVoidAsync("alert", System.Text.Json.JsonSerializer.Serialize(categories)); 
        if (categories != null ) {
            foreach (var category in categories){
                 ToDoList.Add(category);
            }
             
        } 

        ShowLoading = false;

    }

    private async Task AddTodoTitle()
    {
      
        newCat = new  Category();

        newCat.Title = newTodoTitle;
        newCat.Active = 1;
        newCat.Sort = 1;       
        
        //await JSRuntime.InvokeVoidAsync("alert", System.Text.Json.JsonSerializer.Serialize(TimeUtils.ToUnixTimeSeconds())); 

        await Http.PostAsJsonAsync<Category>("api/category", newCat);
        await OnInitializedAsync();

        newTodoTitle = "";
        
    }

    private bool TodoSelected(TodoItem item) {
        return (item.Completed == 1 ? true : false);
    }

    private async Task DeleteToDoItem(TodoItem item, Category cat) {
        //await JSRuntime.InvokeVoidAsync("alert", System.Text.Json.JsonSerializer.Serialize(item)); 
        item.Active = item.Active == 1 ? 0 : 1;
        if (item.Active == 0) {
            item.CompletedCssClass = item.CompletedCssClass + " deleted";
        } else {
            if(item.CompletedCssClass.Contains("deleted")){
                item.CompletedCssClass = item.CompletedCssClass.Replace(" deleted", "");
            }            
        }

        await AddTodoItem(cat, true);
    }

    private async Task TodoItemMarkComplete(TodoItem item, Category cat, ChangeEventArgs e) {        
        item.Completed = ((bool)e.Value)  ? 1: 0;
        item.CompletedCssClass = item.Completed == 1 ? "row completed" : "row";
        

        await AddTodoItem(cat, true);
    }

    private async Task AddTodoItem(Category cat, bool isUpdate) {
        newCat = new Category();
        newCat = cat;
        
        List<TodoItem> mydoList = new List<TodoItem>();

        if (!isUpdate) {
            mydoList.Add(new TodoItem(){ItemID=TimeUtils.ToUnixTimeSeconds(), Title=newTodo, Active=1, Sort=1, Completed=0, CompletedCssClass="row"});
        }    

        newTodo = "";    

        //await JSRuntime.InvokeVoidAsync("alert", System.Text.Json.JsonSerializer.Serialize(mydoList)); 

        if (newCat.ToDo != null) {
            foreach (var items in cat.ToDo)
            {   
                mydoList.Add(new TodoItem(){
                    Title=items.Title,                     
                    Active=items.Active, 
                    Sort=items.Sort, 
                    ItemID= items.ItemID, 
                    Completed= items.Completed, 
                    CompletedCssClass=items.CompletedCssClass });
            } 
        }
        
        newCat.ToDo = mydoList; 
        await Http.PutAsJsonAsync<Category>("api/category/"+newCat.CategoryID, newCat);

        await OnInitializedAsync();
        
    }
    public void OnItemDrop()
    {
       // DropedItem = item;
        StateHasChanged();
    }
    public void OnReplacedItemDrop()
    {
       // replacedItem = item;
        StateHasChanged();
    }

   /* public List<TodoItem> ToDoList = new List<TodoItem>() {
       new TodoItem(){Title = "Style this list"},
        new TodoItem(){Title = "Fix a bug"},
        new TodoItem(){Title = "Build a feature"},
        new TodoItem(){Title = "Create a PR"}
    }; */

  /*  public List<TodoItem> MyToDoList = new List<TodoItem>()
    {
            new TodoItem(){
                Title = "Drag this item", 
                TaskList=[
                    
                ]            
            },
            new TodoItem(){
                Title = "Add another item",
                TaskList = []
            },
            new TodoItem(){
                Title = "Remove this item",
                TaskList = []
            }
                
          //  new TodoItem(){Title = "Style this list"},
           // new TodoItem(){Title = "Fix a bug"},
           // new TodoItem(){Title = "Build a feature"},
           // new TodoItem(){Title = "Create a PR"},
    }; */
}