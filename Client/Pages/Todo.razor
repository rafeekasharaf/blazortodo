@page "/"
@page "/todo"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using ToDo.Shared
@using ToDo.Shared.Utils
@inject HttpClient Http
@inject IJSRuntime JSRuntime



<div class="main">
    <div class="container-fluid " id="page-content">
        <div class="padding">

            @if(ShowGoogleLoginWindow) {
                <div class="col d-flex justify-content-center align-items-center google-auth-container vh-100">
                    <div class="card p-3">
                        <div class="card-body">

                            <h3> Please Login with your Google account.  </h3>
                            <small> We will be using only your email address not any other informations regarding your Google account. </small>
                            <div class="col-md-12 mt-3 text-center">
                                <a class="btn btn-outline-success" href="/auth/google-login" role="button" style="text-transform:none; font-size:25px">
                                    <img width="35px" style="margin:5px" alt="Google sign-in"
                                    src="https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/Google_%22G%22_Logo.svg/512px-Google_%22G%22_Logo.svg.png" />
                                    Login with Google
                                </a>
                            </div>
                        </div>
                    </div>
                        
                </div>
            }
            else {
                <div class="row  d-flex justify-content-start add-title-container">
                    <div class="col-xs-12 col-sm-12 col-md-6 col-lg-6">
                        <div class="d-flex">
                            <input class="form-control form-control-lg add-text" type="text" @bind-value=@newTodoTitle
                                placeholder="Title for ToDo">

                            <button type="button" @onclick="AddTodoTitle"
                            class="btn btn-outline-success btn-lg">Add Title</button>
                        </div>
                    </div>
                </div>            

                @if(ShowLoading) {
                    <LoadingScreen></LoadingScreen>
                }
                else {
                    <div class="row">
                        <div class="col-md-12">
                            <div class="container-fluid no-padding">
                                <div class="card-columns">
                                    <Dropzone Items="ToDoList" InstantReplace="true" TItem="Category">
                                        @{
                                            var todoCategory = @context;                                        
                                        }
                                        <div class="card text-white bg-dark">
                                            @if(ShowEditBox && todoCategory.CategoryID == currentCatID){
                                                <div class="card-header d-flex justify-content-between align-items-center">
                                                    <input class="form-control add-text" type="text" @bind-value=@updateTodoTitle>
                                                    <h6>
                                                        <i class="title-action-icon oi oi-check" data-toggle="tooltip" data-placement="bottom" 
                                                        title="Update"  @onclick="@(()=>UpdateTodoTitle(todoCategory))"></i>
                                                        <i class="title-action-icon oi oi-circle-x" data-toggle="tooltip" data-placement="bottom" title="Close"
                                                        @onclick="@(()=>ToggleTitleEdit(todoCategory, todoCategory.CategoryID, false))"></i>
                                                    </h6>
                                                </div>
                                            }
                                            else {                                     

                                                <div class="card-header  d-flex justify-content-between align-items-center">
                                                    @context.Title
                                                    <h6>
                                                        <button type="button" class="btn btn-outline-light "
                                                        @onclick="@(()=>ToggleTitleEdit(todoCategory, todoCategory.CategoryID, true))">
                                                            <i class="oi oi-pencil" data-toggle="tooltip" data-placement="bottom" title="Edit"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-outline-danger "
                                                    @onclick="@(()=>DeleteTodoSection(todoCategory.CategoryID))">
                                                            <i class="oi oi-trash" data-toggle="tooltip" data-placement="bottom" title="Delete"></i>
                                                        </button>
                                                    </h6>
                                                </div>
                                            }                                        

                                            <div class="card-body">
                                                <div class="list-wrapper">
                                                    <div class="todo-list">                                                    
                                                        @if(@context.ToDo != null ){
                                                            <ul>
                                                                @foreach (var items in todoCategory.ToDo)
                                                                {   
                                                                    <li  class="@items.CompletedCssClass" id="@items.ItemID">
                                                                        <div class="form-check col-md-10 col-lg-10 col-sm-10 col-xs-10" style="margin-left: 15px"> 
                                                                            
                                                                            <label class="form-check-label"> 
                                                                                @if(items.Active == 1){
                                                                                    <input class="checkbox" type="checkbox" @onchange="(e) => TodoItemMarkComplete(items,todoCategory, e)">
                                                                                }
                                                                                else {
                                                                                    <input class="checkbox disabled" type="checkbox">
                                                                                }                                                                       
                                                                                    @items.Title
                                                                                    <i class="input-helper"></i>
                                                                            </label>                                                                                
                                                                                
                                                                            <small class="status-bottom float-right">@GetTodoItemStatus(items)</small>                                                                       
                                                                        </div>
                                                                        <div class="col-md-1 col-lg-1 col-sm-1 col-xs-1" 
                                                                                style="padding:0px" @onclick="()=>DeleteToDoItem(items,todoCategory)">
                                                                            @if(items.Active == 1) {                                                                                   
                                                                                <i class="remove oi oi-delete"></i>
                                                                            } 
                                                                            else {                                                                                        
                                                                                <i class="remove oi oi-action-undo"></i>
                                                                            }                                                                        
                                                                        </div> 
                                                                    </li>
                                                                }
                                                            </ul>
                                                        }
                                                        else{
                                                            <div class="alert alert-info mt-3 mb-3 pt-5 pb-5" style="font-size: 13px;" >
                                                                Please add your todo items here
                                                            </div>
                                                        }
                                                </div>
                                                <div class="todo-add d-flex">
                                                    <input class="form-control" type="text" @bind-value=@newTodo 
                                                    placeholder="Add items">
                                                    
                                                    <button type="button"                                                                                             
                                                        @onclick="()=> AddTodoItem(todoCategory, false)"
                                                    class="btn btn-outline-success">Add</button>
                                                </div>

                                            
                                            </div>
                                        </div>
                                    </div>
                                </Dropzone>
                            </div>
                        </div>
                    </div>
                </div>
            }

            }
           
        </div>
    </div>  


</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState {get; set;}
      
    private string newTodo, newTodoTitle, updateTodoTitle, currentCatID;
    private Category[] categories ;
    private Category newCat = new Category();
    public List<Category> ToDoList = null;
    
    private bool ShowLoading { get; set; }
    private bool ShowEditBox { get; set; }= false;
    private bool ShowGoogleLoginWindow{ get; set;} = false;

    protected override async Task OnInitializedAsync()
    {
        ShowLoading = true;

        var authState = await authenticationState;
        var user = authState.User;

     //await JSRuntime.InvokeVoidAsync("alert", System.Text.Json.JsonSerializer.Serialize(user.Identity)); 

        if (user.Identity.IsAuthenticated) {
            ToDoList = new List<Category>();
            categories = await Http.GetFromJsonAsync<Category[]>("api/category/email/"+user.Identity.Name);
            //await JSRuntime.InvokeVoidAsync("alert", System.Text.Json.JsonSerializer.Serialize(categories)); 
            if (categories != null ) {
                foreach (var category in categories){
                    if (category.ToDo != null){
                        category.ToDo = category.ToDo.OrderBy(items => items.Completed).OrderByDescending(items=>items.Active).ToList();
                    }
                    ToDoList.Add(category);
                }
                
            } 
        }
        else {
            ShowGoogleLoginWindow = true;
        }

        
        ShowLoading = false;

        

    }

    private void ToggleTitleEdit(Category cat, string catID, bool isShow) {
        if(cat.CategoryID == catID && isShow) {
            currentCatID = catID;
            updateTodoTitle = cat.Title;
            ShowEditBox = true;
        } 
        else {
            ShowEditBox = false;
            currentCatID = null;
            updateTodoTitle = "";
        }
        
        StateHasChanged();
    }

    private async Task UpdateTodoTitle(Category cat) {
        cat.Title = updateTodoTitle;
        updateTodoTitle = "";
        ShowEditBox=false;

        await Http.PutAsJsonAsync<Category>("api/category/"+cat.CategoryID, cat);
        await OnInitializedAsync();
    }

    private async Task DeleteTodoSection(string categoryID) {
        var confirm = await JSRuntime.InvokeAsync<bool>("deleteConfirmation", "Delete?", "Are you sure you want to delete this?", "question");
        if (confirm) {
            await Http.DeleteAsync("api/category/"+categoryID);
            await OnInitializedAsync();
            StateHasChanged();
        }
        
    }

    private async Task AddTodoTitle()
    {

        if (string.IsNullOrWhiteSpace(newTodoTitle)){
            return;
        }
        var authState = await authenticationState;
        var user = authState.User;
      
        newCat = new  Category {
            Title= newTodoTitle,
            Active= 1,
            Sort= 1,
            Email=user.Identity.Name
        };
         newTodoTitle = "";
        //await JSRuntime.InvokeVoidAsync("alert", System.Text.Json.JsonSerializer.Serialize(TimeUtils.ToUnixTimeSeconds())); 

        await Http.PostAsJsonAsync<Category>("api/category", newCat);
        await OnInitializedAsync();
        StateHasChanged();
       
        
    }

    private string GetTodoItemStatus(TodoItem item) {
        string itemStatus = "";

        if (item.Completed == 1) {
            itemStatus = "Completed";
        } else if (item.Active == 0){
            itemStatus = "Removed";
        }

        return itemStatus;
    }

    private bool TodoSelected(TodoItem item) {
        return (item.Completed == 1 ? true : false);
    }

    private async Task DeleteToDoItem(TodoItem item, Category cat) {
        //await JSRuntime.InvokeVoidAsync("alert", System.Text.Json.JsonSerializer.Serialize(item)); 
        item.Active = item.Active == 1 ? 0 : 1;
        if (item.Active == 0) {
            item.CompletedCssClass = item.CompletedCssClass + " deleted";
        } else {
            if(item.CompletedCssClass.Contains("deleted")){
                item.CompletedCssClass = item.CompletedCssClass.Replace(" deleted", "");
            }            
        }

        await AddTodoItem(cat, true);
    }

    private async Task TodoItemMarkComplete(TodoItem item, Category cat, ChangeEventArgs e) {        
        item.Completed = ((bool)e.Value)  ? 1: 0;
        item.CompletedCssClass = item.Completed == 1 ? "row completed" : "row";
        

        await AddTodoItem(cat, true);
    }

    private async Task AddTodoItem(Category cat, bool isUpdate) {
        if (string.IsNullOrWhiteSpace(newTodo)) {
            return;
        }
        
        newCat = new Category();
        newCat = cat;
        
        List<TodoItem> mydoList = new List<TodoItem>();

        if (!isUpdate) {
            mydoList.Add(new TodoItem(){ItemID=TimeUtils.ToUnixTimeSeconds(), Title=newTodo, Active=1, Sort=1, Completed=0, CompletedCssClass="row"});
        }    

        newTodo = "";    

        //await JSRuntime.InvokeVoidAsync("alert", System.Text.Json.JsonSerializer.Serialize(mydoList)); 

        if (newCat.ToDo != null) {
            foreach (var items in cat.ToDo)
            {   
                mydoList.Add(new TodoItem(){
                    Title=items.Title,                     
                    Active=items.Active, 
                    Sort=items.Sort, 
                    ItemID= items.ItemID, 
                    Completed= items.Completed, 
                    CompletedCssClass=items.CompletedCssClass });
            } 
        }
        
        newCat.ToDo = mydoList; 
        await Http.PutAsJsonAsync<Category>("api/category/"+newCat.CategoryID, newCat);

        await OnInitializedAsync();
        
    }
    public void OnItemDrop()
    {
       // DropedItem = item;
        StateHasChanged();
    }
    public void OnReplacedItemDrop()
    {
       // replacedItem = item;
        StateHasChanged();
    }
 
}